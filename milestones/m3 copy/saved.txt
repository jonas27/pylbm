import matplotlib.pyplot as plt
import numpy as np
from pylbm import lbm
from scipy.optimize import curve_fit
epochs = 3000
eps = 0.1
omegas = np.arange(0.1, 1.91, 0.2).round(decimals=1)
x_dim, y_dim = 30, 30
omegas
x = np.arange(x_dim)
y = np.arange(y_dim)
X, Y = np.meshgrid(x, y)
r_mean, u_mean = 1, 0.0

amps_total = []
velocities_print = []
for omega in omegas:
    velocities_omega = []
    r_xy = lbm.density_init(x_dim=x_dim, y_dim=y_dim, r_mean=r_mean, eps=0.0)

    u_axy = lbm.local_avg_velocity_init(x_dim=x_dim, y_dim=y_dim, u_mean=u_mean, eps=0.0)
    u_axy[0] += eps * np.sin(2.0 * np.pi / y_dim * Y).T
    f_cxy = lbm.f_eq(u_axy=u_axy, r_xy=r_xy)

    amps_emp = []
    for e in range(epochs):
        # amps_emp.append(r_xy[x_dim // 4, 0])
        if epochs % (epochs//10) == 0:
            # choose any i value, all y values
            velocities_omega.append([u_axy[0, 0, :], e])

        amp = u_axy[0, 0, :]
        # amps_emp.append(amp.max() - amp.mean())
        amps_emp.append(u_axy[0, 0, :].max())

        f_cxy = lbm.stream(f_cxy=f_cxy)
        f_cxy, u_axy = lbm.collision(f_cxy=f_cxy, omega=omega)
        r_xy = lbm.density(f_cxy=f_cxy)
    velocities_print.append(velocities_omega)
    

    # break
    amps_emp = np.array(amps_emp)
    amps_total.append([omega, amps_emp])
fig, ax = plt.subplots(figsize=(8,5))
ax.set_title("Velocity decay (omega=0.5)")
ax.set_xlabel("velocity")
ax.set_ylabel("y")
for v in velocities_print[0]: 
    ax.plot(v[0],np.arange(y_dim), label="velocity at t={}".format(v[1]))
ax.legend()
ax.grid()
plt.show()
plt.close()

fig, ax = plt.subplots(figsize=(8,5))
nys_emp = []
for amp in amps_total:
    def func(x, a):
        return np.exp(-a*x*((2*np.pi/y_dim)**2))
    popt, pcov = curve_fit(func, np.arange(epochs), amp[1]/amp[1][0])
    nys_emp.append(popt[0])
vs_theo = 1/3*(1/omegas-0.5)
ax.plot(omegas,vs_theo,'--bo', color='red', label='Theoretical viscocities')
ax.plot(omegas,nys_emp,'--bo',label='Empirical viscocities')
ax.set_title("Kinematic viscosity scaling with  ω")
ax.set_xlabel('ω')
ax.set_ylabel('ν')
ax.legend()
ax.grid()

plt.show()
plt.close()
len(velocities_print[0])
for e in range(epochs):
    # amps_emp.append(r_xy[x_dim // 4, 0])
    if epochs % (epochs//10) == 0:
        print(e)
(epochs//10)
# for e in range(epochs):
#     # amps_emp.append(r_xy[x_dim // 4, 0])
#     if epochs % (epochs//10) == 0:
#         print(e)
(epochs//10)
for e in range(epochs):
    # amps_emp.append(r_xy[x_dim // 4, 0])
    if e % (epochs//10) == 0:
        print(e)
x = np.arange(x_dim)
y = np.arange(y_dim)
X, Y = np.meshgrid(x, y)
r_mean, u_mean = 1, 0.0

amps_total = []
velocities_print = []
for omega in omegas:
    velocities_omega = []
    r_xy = lbm.density_init(x_dim=x_dim, y_dim=y_dim, r_mean=r_mean, eps=0.0)

    u_axy = lbm.local_avg_velocity_init(x_dim=x_dim, y_dim=y_dim, u_mean=u_mean, eps=0.0)
    u_axy[0] += eps * np.sin(2.0 * np.pi / y_dim * Y).T
    f_cxy = lbm.f_eq(u_axy=u_axy, r_xy=r_xy)

    amps_emp = []
    for e in range(epochs):
        # amps_emp.append(r_xy[x_dim // 4, 0])
        if e % (epochs//10) == 0:
            # choose any i value, all y values
            velocities_omega.append([u_axy[0, 0, :], e])

        amp = u_axy[0, 0, :]
        # amps_emp.append(amp.max() - amp.mean())
        amps_emp.append(u_axy[0, 0, :].max())

        f_cxy = lbm.stream(f_cxy=f_cxy)
        f_cxy, u_axy = lbm.collision(f_cxy=f_cxy, omega=omega)
        r_xy = lbm.density(f_cxy=f_cxy)
    velocities_print.append(velocities_omega)
    

    amps_emp = np.array(amps_emp)
    amps_total.append([omega, amps_emp])
fig, ax = plt.subplots(figsize=(8,5))
ax.set_title("Velocity decay (omega=0.5)")
ax.set_xlabel("velocity")
ax.set_ylabel("y")
for v in velocities_print[0]: 
    ax.plot(v[0],np.arange(y_dim), label="velocity at t={}".format(v[1]))
ax.legend()
ax.grid()
plt.show()
plt.close()

fig, ax = plt.subplots(figsize=(8,5))
nys_emp = []
for amp in amps_total:
    def func(x, a):
        return np.exp(-a*x*((2*np.pi/y_dim)**2))
    popt, pcov = curve_fit(func, np.arange(epochs), amp[1]/amp[1][0])
    nys_emp.append(popt[0])
vs_theo = 1/3*(1/omegas-0.5)
ax.plot(omegas,vs_theo,'--bo', color='red', label='Theoretical viscocities')
ax.plot(omegas,nys_emp,'--bo',label='Empirical viscocities')
ax.set_title("Kinematic viscosity scaling with  ω")
ax.set_xlabel('ω')
ax.set_ylabel('ν')
ax.legend()
ax.grid()

plt.show()
plt.close()
fig, ax = plt.subplots(figsize=(8,5))
ax.set_title("Velocity decay (omega=0.5)")
ax.set_xlabel("velocity")
ax.set_ylabel("y")
for v in velocities_print[0]: 
    ax.plot(v[0],np.arange(y_dim), label="velocity at t={}".format(v[1]))
ax.legend()
ax.grid()
plt.show()
plt.close()

fig, ax = plt.subplots(figsize=(8,5))
nys_emp = []
for amp in amps_total:
    def func(x, a):
        return np.exp(-a*x*((2*np.pi/y_dim)**2))
    popt, pcov = curve_fit(func, np.arange(epochs), amp[1]/amp[1][0])
    nys_emp.append(popt[0])
vs_theo = 1/3*(1/omegas-0.5)
ax.plot(omegas,vs_theo,'--bo', color='red', label='Theoretical viscocities')
ax.plot(omegas,nys_emp,'--bo',label='Empirical viscocities')
ax.set_title("Kinematic viscosity scaling with  ω")
ax.set_xlabel('ω')
ax.set_ylabel('ν')
ax.legend()
ax.grid()

plt.show()
plt.close()
fig, ax = plt.subplots(figsize=(8,5))
ax.set_title("Velocity decay (omega=0.5)")
ax.set_xlabel("velocity")
ax.set_ylabel("y")
for v in velocities_print[-1]: 
    ax.plot(v[0],np.arange(y_dim), label="velocity at t={}".format(v[1]))
ax.legend()
ax.grid()
plt.show()
plt.close()

fig, ax = plt.subplots(figsize=(8,5))
nys_emp = []
for amp in amps_total:
    def func(x, a):
        return np.exp(-a*x*((2*np.pi/y_dim)**2))
    popt, pcov = curve_fit(func, np.arange(epochs), amp[1]/amp[1][0])
    nys_emp.append(popt[0])
vs_theo = 1/3*(1/omegas-0.5)
ax.plot(omegas,vs_theo,'--bo', color='red', label='Theoretical viscocities')
ax.plot(omegas,nys_emp,'--bo',label='Empirical viscocities')
ax.set_title("Kinematic viscosity scaling with  ω")
ax.set_xlabel('ω')
ax.set_ylabel('ν')
ax.legend()
ax.grid()

plt.show()
plt.close()
fig, ax = plt.subplots(figsize=(8,5))
ax.set_title("Velocity decay (omega=0.5)")
ax.set_xlabel("velocity")
ax.set_ylabel("y")
for v in velocities_print[-2]: 
    ax.plot(v[0],np.arange(y_dim), label="velocity at t={}".format(v[1]))
ax.legend()
ax.grid()
plt.show()
plt.close()

fig, ax = plt.subplots(figsize=(8,5))
nys_emp = []
for amp in amps_total:
    def func(x, a):
        return np.exp(-a*x*((2*np.pi/y_dim)**2))
    popt, pcov = curve_fit(func, np.arange(epochs), amp[1]/amp[1][0])
    nys_emp.append(popt[0])
vs_theo = 1/3*(1/omegas-0.5)
ax.plot(omegas,vs_theo,'--bo', color='red', label='Theoretical viscocities')
ax.plot(omegas,nys_emp,'--bo',label='Empirical viscocities')
ax.set_title("Kinematic viscosity scaling with  ω")
ax.set_xlabel('ω')
ax.set_ylabel('ν')
ax.legend()
ax.grid()

plt.show()
plt.close()
x = np.arange(x_dim)
y = np.arange(y_dim)
X, Y = np.meshgrid(x, y)
r_mean, u_mean = 0.5, 0.0

fig, ax = plt.subplots(figsize=(15,5))

for o in [0.5,1,1.7]:
    vs_emp = []
    r_xy = lbm.density_init(x_dim=x_dim, y_dim=y_dim, r_mean=r_mean, eps=0.0)
    r_xy += eps * np.sin(2.0 * np.pi / x_dim * X).T

    u_axy = lbm.local_avg_velocity_init(x_dim=x_dim, y_dim=y_dim, u_mean=u_mean, eps=0.0)
    f_cxy = lbm.f_eq(u_axy=u_axy, r_xy=r_xy)

    densities = []
    for e in range(epochs):
        # use max density (j dim doesn't matter)
        densities.append(r_xy[x_dim // 4, 0])
        f_cxy = lbm.stream(f_cxy=f_cxy)
        f_cxy, u_axy = lbm.collision(f_cxy=f_cxy, omega=o)
        r_xy = lbm.density(f_cxy=f_cxy)

    def func(x, a, b, c, d):
        return a * np.cos(b * x) * np.exp(-c * x) + d

    popt, pcov = curve_fit(func, np.arange(epochs), densities)
    v = popt[2] / (2 * np.pi / x_dim) ** 2
    vs_emp.append(v)
    densities = np.array(densities)
    ax.plot(np.arange(epochs),densities, label='omega='+str(o))


ax.set_xlabel("time")
ax.set_ylabel("density")
# ax.set_title("Density decay, omega=0.5")
ax.legend()
ax.grid(True)
lbm.save_fig(fig, 'm3-1-density-decay.pgf')
plt.show()
plt.close()
%history
